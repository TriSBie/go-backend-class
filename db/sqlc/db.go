// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addMoneyToAccountStmt, err = db.PrepareContext(ctx, addMoneyToAccount); err != nil {
		return nil, fmt.Errorf("error preparing query AddMoneyToAccount: %w", err)
	}
	if q.createAccountsStmt, err = db.PrepareContext(ctx, createAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccounts: %w", err)
	}
	if q.createEntryStmt, err = db.PrepareContext(ctx, createEntry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEntry: %w", err)
	}
	if q.createTransferStmt, err = db.PrepareContext(ctx, createTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransfer: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.getAccountByIdStmt, err = db.PrepareContext(ctx, getAccountById); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountById: %w", err)
	}
	if q.getAccountForUpdateStmt, err = db.PrepareContext(ctx, getAccountForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountForUpdate: %w", err)
	}
	if q.getAccountsStmt, err = db.PrepareContext(ctx, getAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccounts: %w", err)
	}
	if q.getEntryByIdStmt, err = db.PrepareContext(ctx, getEntryById); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntryById: %w", err)
	}
	if q.getTransferByIdStmt, err = db.PrepareContext(ctx, getTransferById); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransferById: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.listEntriesStmt, err = db.PrepareContext(ctx, listEntries); err != nil {
		return nil, fmt.Errorf("error preparing query ListEntries: %w", err)
	}
	if q.listTransfersStmt, err = db.PrepareContext(ctx, listTransfers); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransfers: %w", err)
	}
	if q.updateAccountBalanceStmt, err = db.PrepareContext(ctx, updateAccountBalance); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountBalance: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addMoneyToAccountStmt != nil {
		if cerr := q.addMoneyToAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addMoneyToAccountStmt: %w", cerr)
		}
	}
	if q.createAccountsStmt != nil {
		if cerr := q.createAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountsStmt: %w", cerr)
		}
	}
	if q.createEntryStmt != nil {
		if cerr := q.createEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEntryStmt: %w", cerr)
		}
	}
	if q.createTransferStmt != nil {
		if cerr := q.createTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransferStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.getAccountByIdStmt != nil {
		if cerr := q.getAccountByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountByIdStmt: %w", cerr)
		}
	}
	if q.getAccountForUpdateStmt != nil {
		if cerr := q.getAccountForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountForUpdateStmt: %w", cerr)
		}
	}
	if q.getAccountsStmt != nil {
		if cerr := q.getAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsStmt: %w", cerr)
		}
	}
	if q.getEntryByIdStmt != nil {
		if cerr := q.getEntryByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntryByIdStmt: %w", cerr)
		}
	}
	if q.getTransferByIdStmt != nil {
		if cerr := q.getTransferByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransferByIdStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.listEntriesStmt != nil {
		if cerr := q.listEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEntriesStmt: %w", cerr)
		}
	}
	if q.listTransfersStmt != nil {
		if cerr := q.listTransfersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransfersStmt: %w", cerr)
		}
	}
	if q.updateAccountBalanceStmt != nil {
		if cerr := q.updateAccountBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountBalanceStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	addMoneyToAccountStmt    *sql.Stmt
	createAccountsStmt       *sql.Stmt
	createEntryStmt          *sql.Stmt
	createTransferStmt       *sql.Stmt
	createUserStmt           *sql.Stmt
	deleteAccountStmt        *sql.Stmt
	getAccountByIdStmt       *sql.Stmt
	getAccountForUpdateStmt  *sql.Stmt
	getAccountsStmt          *sql.Stmt
	getEntryByIdStmt         *sql.Stmt
	getTransferByIdStmt      *sql.Stmt
	getUserByUsernameStmt    *sql.Stmt
	listEntriesStmt          *sql.Stmt
	listTransfersStmt        *sql.Stmt
	updateAccountBalanceStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		addMoneyToAccountStmt:    q.addMoneyToAccountStmt,
		createAccountsStmt:       q.createAccountsStmt,
		createEntryStmt:          q.createEntryStmt,
		createTransferStmt:       q.createTransferStmt,
		createUserStmt:           q.createUserStmt,
		deleteAccountStmt:        q.deleteAccountStmt,
		getAccountByIdStmt:       q.getAccountByIdStmt,
		getAccountForUpdateStmt:  q.getAccountForUpdateStmt,
		getAccountsStmt:          q.getAccountsStmt,
		getEntryByIdStmt:         q.getEntryByIdStmt,
		getTransferByIdStmt:      q.getTransferByIdStmt,
		getUserByUsernameStmt:    q.getUserByUsernameStmt,
		listEntriesStmt:          q.listEntriesStmt,
		listTransfersStmt:        q.listTransfersStmt,
		updateAccountBalanceStmt: q.updateAccountBalanceStmt,
	}
}
